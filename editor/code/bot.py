import telebot  # pip install pyTelegramBotAPI
from telebot import types
from bot_message import *
from config import TOKEN
import media_converter
import pickle
import sys
from code_analyzer import CodeAnalyzer
import parser

class Bot:
    """–ö–ª–∞—Å—Å Telegram-–±–æ—Ç–∞ —Å –∏–≥—Ä–æ–π."""
    def __init__(self, token, start_post):
        """–°–æ–∑–¥–∞—ë—Ç Telegram-–±–æ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        token - —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        start_post - –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –∏–≥—Ä—ã
        """
        token = TOKEN
        self.tgbot = telebot.TeleBot(token)
        self.user_table = []  # —Ç–∞–±–ª–∏—Ü–∞ —Å –∑–∞–ø–∏—Å—è–º–∏ –≤–∏–¥–∞ "userid - post - last_message_id"
        self.start_post = start_post

        @self.tgbot.message_handler(commands=['start'])
        def register_new_user(message):
            """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∏–º –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"."""
            if any([user_id == message.from_user.id for user_id, _, _ in self.user_table]):
                return  # –¥–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ —É–∂–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É
            # –¥–µ–ª–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
            self.user_table.append((message.from_user.id, self.start_post, message.id))
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∏–≥—Ä—É.')
            post = self.start_post
            self.send(message, post)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            while True:
                post = post.get_next(message.text)
                if post is None:
                    break
                self.send(received=message, new_post=post)
                message.text = None


        @self.tgbot.message_handler(content_types=['text'])
        def handle_text(message):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–≥—Ä–æ–∫–∞."""
            post = None
            for user_id, last_post, _ in self.user_table:
                if user_id == message.from_user.id:
                    post = last_post
                    break
            if post is None:
                # –∏–≥—Ä–æ–∫ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É (–Ω–µ –Ω–∞–∂–∞–ª –Ω–∞ "–°—Ç–∞—Ä—Ç")
                return
            while True:
                post = post.get_next(message.text)  # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                if post is None:
                    # —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–±–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    break
                self.send(received=message, new_post=post)
                message.text = None

        AUDIO_OGG = 'audio.ogg'
        @self.tgbot.message_handler(content_types=['voice'])
        def handle_voice(message):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–≥—Ä–æ–∫–∞."""
            post = None
            for user_id, last_post, _ in self.user_table:
                if user_id == message.from_user.id:
                    post = last_post
                    break
            if post is None:
                # –∏–≥—Ä–æ–∫ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É (–Ω–µ –Ω–∞–∂–∞–ª –Ω–∞ "–°—Ç–∞—Ä—Ç")
                return
            file_info = self.tgbot.get_file(message.voice.file_id)
            downloaded_file = self.tgbot.download_file(file_info.file_path)
            with open(AUDIO_OGG, 'wb') as f:
                f.write(downloaded_file)
            mc = media_converter.MediaConverter()
            text = mc.voiceToText(AUDIO_OGG)
            if text == mc.UNKNOWN:
                self.tgbot.send_message(message.chat.id, 'üôÅ –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Å–∫–∞–∑–∞–ª–∏', timeout=self.TIMEOUT)
            else:
                self.tgbot.send_message(message.chat.id, f'üòä –ö–∞–∂–µ—Ç—Å—è, –≤—ã —Å–∫–∞–∑–∞–ª–∏: {text}', timeout=self.TIMEOUT)
            while True:
                post = post.get_next(text)  # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                if post is None:
                    # —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–±–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    break
                self.send(received=message, new_post=post)
                text = None

        @self.tgbot.callback_query_handler(func=lambda call: True)
        def handle_buttons(call):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
            self.tgbot.answer_callback_query(call.id)
            post = None
            for user_id, last_post, last_message_id in self.user_table:
                if user_id == call.from_user.id and last_message_id == call.message.id:
                    post = last_post
                    break
            if post is None:
                # –∏–≥—Ä–æ–∫ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É (–Ω–µ –Ω–∞–∂–∞–ª –Ω–∞ "–°—Ç–∞—Ä—Ç") –∏–ª–∏ –Ω–∞–∂–∞–ª –Ω–∞ —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
                return
            while True:
                post = post.get_next(call.data)  # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                if post is None:
                    # —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–±–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    break
                self.send(received=call.message, new_post=post)
                call.data = None

        self.tgbot.infinity_polling()  # –Ω–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –±–æ—Ç–∞

    TIMEOUT = 45
    def send(self, received, new_post):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤ —á–∞—Ç.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        received - –ø–æ–ª—É—á–µ–Ω–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–∏–ø telebot.Message)
        new_post - –ø–æ—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ç–∏–ø bot_message.Post)
        """
        if isinstance(new_post, TextPost):
            sent = self.tgbot.send_message(received.chat.id, new_post.content, timeout=self.TIMEOUT)
        elif isinstance(new_post, ImagePost):
            with open(new_post.content, 'rb') as content:
                sent = self.tgbot.send_photo(received.chat.id, content, timeout=self.TIMEOUT)
        elif isinstance(new_post, VideoPost):
            with open(new_post.content, 'rb') as content:
                sent = self.tgbot.send_video(received.chat.id, content, timeout=self.TIMEOUT)
        elif isinstance(new_post, VoicePost):
            with open(new_post.content, 'rb') as content:
                sent = self.tgbot.send_voice(received.chat.id, content, timeout=self.TIMEOUT)
        elif isinstance(new_post, GifPost):
            with open(new_post.content, 'rb') as content:
                sent = self.tgbot.send_animation(received.chat.id, content, timeout=self.TIMEOUT)
        elif isinstance(new_post, RoundPost):
            with open(new_post.content, 'rb') as content:
                sent = self.tgbot.send_video_note(received.chat.id, content,
                                                  length=new_post.width, timeout=self.TIMEOUT)
        elif isinstance(new_post, DocPost):
            with open(new_post.content, 'rb') as content:
                sent = self.tgbot.send_document(received.chat.id, content, timeout=self.TIMEOUT)
        elif isinstance(new_post, AudioPost):
            with open(new_post.content, 'rb') as content:
                sent = self.tgbot.send_audio(received.chat.id, content, timeout=self.TIMEOUT)
        elif isinstance(new_post, StickerPost):
            with open(new_post.content, 'rb') as content:
                sent = self.tgbot.send_sticker(received.chat.id, content, timeout=self.TIMEOUT)
        elif isinstance(new_post, ButtonsPost):
            markup_inline = types.InlineKeyboardMarkup()
            for button in new_post.content:
                new_item = types.InlineKeyboardButton(text=button.text,
                                                      callback_data=button.callback_data)
                markup_inline.add(new_item)
            sent = self.tgbot.send_message(received.chat.id, new_post.caption,
                                           reply_markup=markup_inline, timeout=self.TIMEOUT)
        elif isinstance(new_post, GroupPost):
            if not new_post.content:  # —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                sent = self.tgbot.send_message(received.chat.id, new_post.caption, timeout=self.TIMEOUT)
            else:
                medias = []
                opened_files = []
                for post in new_post.content:
                    content = open(post.content, 'rb')
                    if isinstance(post, DocPost):
                        medias = [types.InputMediaDocument(content)]
                        break
                    elif isinstance(post, AudioPost):
                        medias= [types.InputMediaAudio(content)]
                        break
                    elif isinstance(post, ImagePost):
                        medias.append(types.InputMediaPhoto(content))
                    elif isinstance(post, VideoPost):
                        medias.append(types.InputMediaVideo(content))
                    opened_files.append(content)
                medias[0].caption = new_post.caption
                sent = self.tgbot.send_media_group(received.chat.id, medias, timeout=self.TIMEOUT)[-1]
                for file in opened_files:
                    file.close()
        else:
            sent = None
            print('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π.')
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–π –ø–æ—Å—Ç
        for i, (user_id, last_post, last_message_id) in enumerate(self.user_table):
            if user_id == received.chat.id:
                self.user_table[i] = (user_id, new_post, sent.id)
                break
        if new_post.is_endpoint():
                    print('endpoint')
                    # –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä—ã, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                    for i in range(len(self.user_table)):
                        if self.user_table[i][0] == received.from_user.id:
                            del self.user_table[i]
